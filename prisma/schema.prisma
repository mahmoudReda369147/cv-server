// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  email     String   @unique
  password  String
  name      String?
  
  // User can have many conversations
  conversations Conversation[]
  // User can have many PDFs
  pdfs        Pdf[]
}

// Conversation model
model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  title     String?
  lastMessage String?
  
  // Relation to User
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  // Relation to Messages
  messages  Message[]
  // Relation to PDFs generated in this conversation
  pdfs      Pdf[]
}

// Message model
model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // "user" (المستخدم) أو "model" (الـ AI)
  role      Role     
  
  // محتوى الرسالة
  content   String
  pdfUrl    String? 
  // Relation to Conversation
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  // Optional relation to a generated PDF record
  pdfs      Pdf[]
}

// تعريف الأدوار المسموح بها
enum Role {
  user
  model
}

// Pdf model to store generated resumes and their thumbnails
model Pdf {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())

  title         String
  pdfUrl        String
  imageUrl      String?

  // Relations
  userId        String
  user          User        @relation(fields: [userId], references: [id])

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  messageId     String?
  message       Message?    @relation(fields: [messageId], references: [id])
}

